@implements IDisposable // Implement IDisposable to clean up DotNetObjectReference

<h3>Budget Buddy</h3>

@if (IsUserLoggedIn)
{
    <p>Welcome, @UserDisplayName!</p>

    @* Budget Management UI *@
    <div class="container mt-4">
        <h4>Your Budget Items</h4>

        <div class="mb-3">
            <input type="text" class="form-control @(string.IsNullOrWhiteSpace(NewItemDescription) && attemptedAdd ? "is-invalid" : "")" @bind="NewItemDescription" placeholder="Item Description" />
            @if (string.IsNullOrWhiteSpace(NewItemDescription) && attemptedAdd)
            {
                <div class="invalid-feedback">
                    Please enter an item description.
                </div>
            }
        </div>
        <div class="mb-3">
            <input type="number" class="form-control @(NewItemAmount <= 0 && attemptedAdd ? "is-invalid" : "")" @bind="NewItemAmount" placeholder="Amount" />
             @if (NewItemAmount <= 0 && attemptedAdd)
            {
                <div class="invalid-feedback">
                    Please enter a valid amount greater than 0.
                </div>
            }
        </div>
        <button class="btn btn-success" @onclick="AddItem" disabled="@(!IsFirebaseReady)">Add Item</button> @* Disable until Firebase is ready *@

        @if (BudgetItems.Any())
        {
            <table class="table table-striped mt-3">
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in BudgetItems)
                    {
                        <tr>
                            <td>@item.Description</td>
                            <td>@item.Amount.ToString("C")</td> @* Format as currency *@
                            <td>
                                <button class="btn btn-sm btn-warning" @onclick="() => EditItem(item)" disabled="@(!IsFirebaseReady)">Edit</button> @* Disable until Firebase is ready *@
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item)" disabled="@(!IsFirebaseReady)">Delete</button> @* Disable until Firebase is ready *@
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p class="mt-3">No budget items added yet.</p>
        }
    </div>

    <button class="btn btn-danger mt-3" @onclick="SignOut" disabled="@(!IsFirebaseReady)">Sign Out</button> @* Disable until Firebase is ready *@
}
else
{
    <p>Please sign in to access your budget.</p>
    <button class="btn btn-primary" @onclick="SignInWithGoogle" disabled="@(!IsFirebaseReady)">Sign In with Google</button> @* Disable until Firebase is ready *@
}

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private bool IsUserLoggedIn { get; set; }
    private string UserDisplayName { get; set; }
    private List<BudgetItem> BudgetItems { get; set; } = new List<BudgetItem>();
    private string NewItemDescription { get; set; }
    private decimal NewItemAmount { get; set; }
    private bool IsFirebaseReady { get; set; } = false;
    private bool attemptedAdd = false; // New flag to track if add was attempted


    // **Create a DotNetObjectReference to this component instance**
    private DotNetObjectReference<BudgetBuddyComponent> selfReference;

    protected override async Task OnInitializedAsync()
    {
        // **Create the DotNetObjectReference**
        selfReference = DotNetObjectReference.Create(this);

        // Wait for Firebase to be ready
        await JSRuntime.InvokeVoidAsync("waitForFirebase");
        IsFirebaseReady = true;
        StateHasChanged(); // Trigger re-render after Firebase is ready

        // **Pass the DotNetObjectReference to JavaScript for auth state changes**
        await JSRuntime.InvokeVoidAsync("setAuthStateChangeCallback", selfReference);

        // Trigger an initial auth state check
        await JSRuntime.InvokeVoidAsync("triggerAuthStateCheck");

        // **Explicitly trigger a StateHasChanged after the initial check**
        // This ensures the UI reflects the initial auth state correctly
        StateHasChanged();


        // Load budget items only if the user is logged in after the initial check
        if (IsUserLoggedIn)
        {
            await LoadBudgetItems(); // Load data when the user is logged in
        }
    }

    // **Implement IDisposable to dispose the DotNetObjectReference**
    public void Dispose()
    {
        selfReference?.Dispose();
    }


    private async Task SignInWithGoogle()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("signInWithGoogle");
            // Authentication state change will be handled by the auth state listener in JS
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error signing in with Google: {ex.Message}");
        }
    }

    private async Task SignOut()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("signOut");
            // Authentication state change will be handled by the auth state listener in JS
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error signing out: {ex.Message}");
        }
    }

    [JSInvokable] // Keep [JSInvokable] for the instance method
    public async Task HandleAuthStateChanged(User user)
    {
        if (user != null)
        {
            IsUserLoggedIn = true;
            UserDisplayName = user.DisplayName;
            await LoadBudgetItems(); // Load data when the user logs in
        }
        else
        {
            IsUserLoggedIn = false;
            UserDisplayName = null;
            BudgetItems.Clear(); // Clear data when the user logs out
        }
        StateHasChanged(); // Notify Blazor to re-render
    }

    // The CheckAuthState method is no longer needed as the auth state
    // listener set up in JavaScript handles initial and subsequent state changes.
    // private async Task CheckAuthState()
    // {
    //     // ... (removed code) ...
    // }


    private async Task LoadBudgetItems()
    {
        if (IsUserLoggedIn)
        {
            try
            {
                 Console.WriteLine($"Loading budget items from Firebase for user: {UserDisplayName}");
                 var userId = await JSRuntime.InvokeAsync<string>("getCurrentUserId");
                 if (!string.IsNullOrWhiteSpace(userId))
                 {
                      // **Call the JavaScript function to load items from Firestore**
                     BudgetItems = await JSRuntime.InvokeAsync<List<BudgetItem>>("loadBudgetItems", userId);
                     StateHasChanged(); // Update UI after loading
                 }
                 else
                 {
                      Console.Error.WriteLine("User not logged in. Cannot load items from Firebase.");
                     BudgetItems.Clear(); // Clear the list if not logged in
                     StateHasChanged();
                 }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error loading budget items: {ex.Message}");
                // TODO: Show an error message to the user
                BudgetItems.Clear(); // Clear the list on error
                StateHasChanged();
            }
        }
        else
        {
             BudgetItems.Clear(); // Clear the list if not logged in
             StateHasChanged();
        }
    }

    private async Task AddItem()
    {
        attemptedAdd = true; // Set flag when add is attempted

        if (IsUserLoggedIn && !string.IsNullOrWhiteSpace(NewItemDescription) && NewItemAmount > 0)
        {
            try
            {
                Console.WriteLine($"Adding item to Firebase: {NewItemDescription}, Amount: {NewItemAmount}");

                var newItem = new BudgetItem
                {
                    Description = NewItemDescription,
                    Amount = NewItemAmount
                    // Add other properties as needed
                };

                var userId = await JSRuntime.InvokeAsync<string>("getCurrentUserId");
                if (!string.IsNullOrWhiteSpace(userId))
                {
                    await JSRuntime.InvokeVoidAsync("addBudgetItem", userId, newItem);

                    // Clear the input fields and reset attemptedAdd flag
                    NewItemDescription = string.Empty;
                    NewItemAmount = 0;
                    attemptedAdd = false;

                    // After adding, reload the budget items to update the UI
                    await LoadBudgetItems();
                }
                else
                {
                    Console.Error.WriteLine("User not logged in. Cannot add item to Firebase.");
                    // TODO: Show an error message to the user
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error adding item: {ex.Message}");
                // TODO: Show an error message to the user
            }
        }
        else
        {
             // Input is invalid or user is not logged in, trigger UI update for validation messages
             StateHasChanged();
             Console.WriteLine("Invalid input or user not logged in. Cannot add item to Firebase.");
        }
    }

    private async Task EditItem(BudgetItem item)
    {
        // TODO: Implement editing a budget item in Firebase
        Console.WriteLine($"Editing item: {item.Description}");
        // You'll likely want a form or modal to edit the item
    }

    private async Task DeleteItem(BudgetItem item)
    {
        // TODO: Implement deleting a budget item from Firebase
        Console.WriteLine($"Deleting item: {item.Description}");

        // Placeholder for deleting item (replace with actual Firebase logic)
        BudgetItems.Remove(item);

        // Reload items (or update the list directly)
        await LoadBudgetItems();
    }

    public class BudgetItem
    {
        public string Id { get; set; }
        public string Description { get; set; }
        public decimal Amount { get; set; }
        // Add other properties as needed (e.g., category, date)
    }

    public class User
    {
        public string DisplayName { get; set; }
        // Add other user properties you need
    }
}
