@using System.ComponentModel.DataAnnotations
@using Resume_Blazor.Models
@inject HttpClient Http
@inject SwapiService Swapi

@* Link to a custom CSS file, ensure you have one in your wwwroot/css folder *@
<link href="../css/custom.css" rel="stylesheet" />

@* Added inline style for sortable header hover effect.
    Ideally, these styles would be placed in your custom.css file. *@
<style>
    .sortable-header {
        transition: background-color 0.3s ease, color 0.3s ease; /* Smooth transition for hover effects */
    }
    .sortable-header:hover {
        background-color: rgba(255, 255, 255, 0.1); /* Light background on hover */
        cursor: pointer; /* Ensure pointer cursor is visible */
        color: #add8e6; /* Lighter text color on hover */
    }
</style>

<h3 style="text-align: center;">Peter's CRUDTable</h3>
<p style="text-align: center">This table is populated by SWAPI API in realtime. </p>

<div class="col-12 row" style="justify-content: center;">
    <div class="table-wrapper-scroll-y my-custom-scrollbar">

        <input type="text" @bind="filterText" placeholder="Filter..." class="form-control mb-2" />

        <table class="table table-striped" style="color:white;">
            <thead>
                <tr>
                    @* Name Column Header with Sort Indicator and Hover Effect *@
                    <th @onclick="() => SortBy(nameof(Item.Name))" class="sortable-header">
                        Name
                        @if (sortColumn == nameof(Item.Name))
                        {
                            <span class="ml-1">@(sortAscending ? "▲" : "▼")</span>
                        }
                    </th>
                    @* Population Column Header with Sort Indicator and Hover Effect *@
                    <th @onclick="() => SortBy(nameof(Item.Population))" class="sortable-header">
                        Population
                        @if (sortColumn == nameof(Item.Population))
                        {
                            <span class="ml-1">@(sortAscending ? "▲" : "▼")</span>
                        }
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in FilteredAndSortedItems)
                {
                    <tr>
                        @if (editItemId == item.Id)
                        {
                            <!-- Display input fields for editing within the same row -->
                            <td><input @bind="editItem!.Name" class="form-control" /></td>
                            <td><input @bind="editItem!.Population" class="form-control" /></td> @* Changed to Population *@
                            <td>
                                <button class="btn btn-success btn-sm" @onclick="SaveEdit">Save</button>
                                <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                            </td>
                        }
                        else
                        {
                            <!-- Display read-only text for the row -->
                            <td>@item.Name</td>
                            <td>@item.Population</td> @* Changed to Population *@
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => EditItem(item)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(item)">Delete</button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        <h3 style="text-align: center">Add New Planet from SWAPI</h3>
        <div style="padding: 10px; text-align: center">
            <div class="form-inline">
                <select @bind="selectedPlanetUrl" class="form-control mr-2">
                    <option value="">-- Select a Planet --</option>
                    @if (swapiPlanets != null)
                    {
                        @foreach (var planetOption in swapiPlanets)
                        {
                            <option value="@planetOption.Url">@planetOption.Name</option>
                        }
                    }
                </select>
                <button class="btn btn-success" @onclick="AddSelectedPlanet">Add Planet</button>
            </div>
        </div>
    </div>
</div>

@* 
<h3>Fetch Star Wars Planet (Individual)</h3>

<button class="btn btn-info" @onclick="GetPlanetData">Get Tatooine and Add to Table (Using ID 1)</button>
<p>
    @if (planet != null)
    {
        <span><strong>Last Fetched:</strong> @planet.Name (Climate: @planet.Climate, Population: @planet.Population)</span>
    }
    else
    {
        <span>Click the button to fetch planet data.</span>
    }
</p> *@



@code {
    @* Assuming a basic Item model like this. If you have a more complex one in Resume_Blazor.Models, it will be used instead. *@

    private Planet? planet; // Make it nullable to represent no data fetched yet
    private List<Planet>? swapiPlanets; // List to store all fetched SWAPI planets for the dropdown
    private string? selectedPlanetUrl; // Stores the URL of the selected planet from the dropdown

    // Method to fetch individual planet data from SWAPI and add it to the items table
    private async Task GetPlanetData()
    {
        try
        {
            // Fetch Tatooine (Planet ID 1) using the injected SwapiService
            planet = await Swapi.GetPlanetAsync(1);
            if (planet != null)
            {
                // Create a new Item object using the fetched planet's name
                var newPlanetItem = new Item
                {
                    Name = planet.Name,
                    // Parse population if available, otherwise default to "unknown" or 0
                    Population = long.TryParse(planet.Population, out long pop) ? pop.ToString("N0") : "unknown"
                };
                items.Add(newPlanetItem); // Add the newly created item to the list that feeds the table
                SortItems(); // Re-sort the table to include the new item in its sorted position
                StateHasChanged(); // Notify Blazor that the component's state has changed, triggering a re-render
            }
            else
            {
                // Log a message if planet data could not be fetched (e.g., API error, invalid ID)
                Console.WriteLine("Failed to fetch planet data.");
            }
        }
        catch (Exception ex)
        {
            // Catch and log any exceptions that occur during the API call
            Console.WriteLine($"Error fetching planet data: {ex.Message}");
            // In a real application, you might also display an error message to the user here
        }
    }

    // Method to add the currently selected planet from the dropdown to the table
    private void AddSelectedPlanet()
    {
        // Ensure a planet is selected and the list of SWAPI planets is available
        if (!string.IsNullOrEmpty(selectedPlanetUrl) && swapiPlanets != null)
        {
            // Find the selected planet object from the fetched list using its URL
            var selectedPlanet = swapiPlanets.FirstOrDefault(p => p.Url == selectedPlanetUrl);
            if (selectedPlanet != null)
            {
                // Create a new Item with the selected planet's name and its population
                var newPlanetItem = new Item
                {
                    Id = Guid.NewGuid(), // Assign a new unique ID
                    Name = selectedPlanet.Name,
                    // Parse population if available, otherwise default to "unknown" or 0
                    Population = long.TryParse(selectedPlanet.Population, out long pop) ? pop.ToString("N0") : "unknown"
                };
                items.Add(newPlanetItem); // Add the new item to the table's data source
                SortItems(); // Re-sort the table to display the new item in order
                selectedPlanetUrl = null; // Reset the dropdown selection after adding
                StateHasChanged(); // Notify Blazor to re-render the component
            }
            else
            {
                Console.WriteLine($"Error: Could not find planet with URL {selectedPlanetUrl}");
            }
        }
    }

    // Item model to hold data for the table rows
    public class Item
    {
        public Guid Id { get; set; } = Guid.NewGuid(); // Unique identifier for each item
        [Required] // Data annotation for validation: Name is required
        public string Name { get; set; } = string.Empty;
        // Changed from Age to Population (string to handle "unknown" and formatted numbers)
        public string Population { get; set; } = "unknown";

        // Creates a shallow copy of the current item, useful for editing operations
        public Item Clone()
        {
            return new Item { Id = this.Id, Name = this.Name, Population = this.Population }; // Updated for Population
        }
    }

    // The main list of items currently displayed in the table
    private List<Item> items = new()
    {
        @* new Item { Name = "Alice", Population = "30" }, // Initial data updated
        new Item { Name = "Bob", Population = "25" },
        new Item { Name = "Charlie", Population = "35" },
        new Item { Name = "David", Population = "20" } *@
    };

    // This newItem model is no longer used for direct input, but kept for consistency if needed elsewhere.
    private Item newItem = new(); // Kept for potential future use or if other AddItem methods exist.

    // Holds a clone of the item being edited; null if no item is being edited
    private Item? editItem = null;
    // Stores the ID of the item currently in edit mode; null if no item is being edited
    private Guid? editItemId = null;
    // Stores the name of the column currently being sorted
    private string? sortColumn;
    // Indicates the current sort direction (true for ascending, false for descending)
    private bool sortAscending = true;
    // Text entered by the user for filtering the table rows
    private string filterText = string.Empty;

    // These are related to the weather forecast example, not directly part of the CRUD table logic
    public ProductCardModel newForcast = new ProductCardModel();
    public List<ProductCardModel>? forecasts; // Make nullable to represent no data fetched yet

    // Computed property that returns the items after applying filtering and then sorting
    private IEnumerable<Item> FilteredAndSortedItems
    {
        get
        {
            // Apply filtering based on the filterText
            var filtered = items.Where(i => string.IsNullOrEmpty(filterText) || i.Name.Contains(filterText, StringComparison.OrdinalIgnoreCase));

            // Apply sorting based on the current sortColumn and sortAscending state
            switch (sortColumn)
            {
                case nameof(Item.Name):
                    return sortAscending ? filtered.OrderBy(i => i.Name) : filtered.OrderByDescending(i => i.Name);
                case nameof(Item.Population): // Updated for Population
                    // For sorting population, we need to try and parse it as a number
                    // Handle "unknown" or non-numeric values gracefully (e.g., sort them last or first)
                    return sortAscending ?
                        filtered.OrderBy(i => long.TryParse(i.Population.Replace(",", ""), out long popValue) ? popValue : long.MinValue) : // Treat "unknown" as smallest
                        filtered.OrderByDescending(i => long.TryParse(i.Population.Replace(",", ""), out long popValue) ? popValue : long.MinValue); // Treat "unknown" as smallest for descending
                default:
                    return filtered; // If no sort column or unrecognized, return only filtered items
            }
        }
    }

    // Lifecycle method: Called when the component is initialized
    protected override void OnInitialized()
    {
        // Set an initial sort column and direction when the component first loads
        sortColumn = nameof(Item.Name); // Default to sorting by Name
        sortAscending = true;          // Default to ascending order
        SortItems();                   // Apply this initial sort
    }

    // Lifecycle method: Called asynchronously when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // This section fetches weather data from a JSON file.
        // It's separate from the main CRUD table and SWAPI functionality.
        try
        {
            forecasts = await Http.GetFromJsonAsync<List<ProductCardModel>>("sample-data/weather.json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching weather data: {ex.Message}");
            forecasts = new List<ProductCardModel>(); // Initialize as an empty list on error
        }

        // Fetch a list of SWAPI planets for the dropdown
        swapiPlanets = new List<Planet>();
        try
        {
            // Simulating fetching a few planets as a SwapiService.GetAllPlanetsAsync might not exist.
            // In a real application, you would implement a method in SwapiService to get all planets.
            for (int i = 1; i <= 5; i++) // Fetching first 5 planets as an example
            {
                var p = await Swapi.GetPlanetAsync(i);
                if (p != null)
                {
                    swapiPlanets.Add(p);
                }
            }
            // Sort planets by name for better display in the dropdown
            swapiPlanets = swapiPlanets.OrderBy(p => p.Name).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching SWAPI planets for dropdown: {ex.Message}");
            swapiPlanets = new List<Planet>(); // Initialize as empty list on error
        }
    }

    // The original AddItem method is now redundant for the UI but is kept for reference.
    // If you need custom item adding, you would re-introduce the inputs and call this method.
    private void AddItem()
    {
        // This method is no longer directly called by the UI for "Add New Item" as it's replaced by AddSelectedPlanet.
        // It is retained here in case it's used elsewhere or for future modifications.
        if (!string.IsNullOrWhiteSpace(newItem.Name))
        {
            newItem.Id = Guid.NewGuid();
            items.Add(new Item { Id = newItem.Id, Name = newItem.Name, Population = newItem.Population }); // Updated for Population
            newItem = new();
            SortItems();
            StateHasChanged(); // Ensure UI updates
        }
    }

    // Initiates the edit mode for a specific item
    private void EditItem(Item item)
    {
        editItemId = item.Id; // Store the ID of the item being edited
        editItem = item.Clone(); // Create a clone of the item to modify, leaving the original untouched until "Save"
    }

    // Saves the changes made in edit mode back to the original item
    private void SaveEdit()
    {
        // Proceed only if an item is currently in edit mode
        if (editItem != null && editItemId.HasValue)
        {
            // Find the original item in the 'items' list using its ID
            var existingItem = items.FirstOrDefault(i => i.Id == editItemId);
            if (existingItem != null)
            {
                // Update the original item's properties with the values from the cloned editItem
                existingItem.Name = editItem.Name;
                existingItem.Population = editItem.Population; // Updated for Population
            }
            editItem = null; // Clear the editItem to exit edit mode
            editItemId = null; // Clear the editItemId
            SortItems(); // Re-sort the list after saving changes to maintain order
            StateHasChanged(); // Ensure UI updates
        }
    }

    // Cancels the current edit operation, discarding any unsaved changes
    private void CancelEdit()
    {
        editItem = null; // Clear the editItem, discarding changes
        editItemId = null; // Clear the editItemId, exiting edit mode
        StateHasChanged(); // Ensure UI updates
    }

    // Deletes a specified item from the 'items' list
    private void DeleteItem(Item item)
    {
        items.Remove(item); // Remove the item from the list
        SortItems(); // Re-sort the list after deletion
        StateHasChanged(); // Ensure UI updates
    }

    // Toggles the sort direction or sets a new sort column
    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending; // If the same column is clicked, toggle the sort direction
        }
        else
        {
            sortColumn = column; // If a new column is clicked, set it as the sort column
            sortAscending = true; // Default to ascending order for a new sort column
        }
        SortItems(); // Apply the new sorting
        StateHasChanged(); // Ensure UI updates
    }

    // Helper method to apply the current sorting preferences to the 'items' list
    private void SortItems()
    {
        if (string.IsNullOrEmpty(sortColumn)) return; // Do nothing if no sort column is specified

        IEnumerable<Item> sortedItems = Enumerable.Empty<Item>();

        // Apply sorting based on the selected column and direction
        switch (sortColumn)
        {
            case nameof(Item.Name):
                sortedItems = sortAscending ? items.OrderBy(i => i.Name) : items.OrderByDescending(i => i.Name);
                break;
            case nameof(Item.Population): // Updated for Population
                sortedItems = sortAscending ?
                    items.OrderBy(i => long.TryParse(i.Population.Replace(",", ""), out long popValue) ? popValue : long.MinValue) :
                    items.OrderByDescending(i => long.TryParse(i.Population.Replace(",", ""), out long popValue) ? popValue : long.MinValue);
                break;
            default:
                // If the sortColumn is not recognized, just keep the current order of items
                sortedItems = items;
                break;
        }

        // Reassign the 'items' list with the newly sorted collection
        items = sortedItems.ToList();
    }
}
