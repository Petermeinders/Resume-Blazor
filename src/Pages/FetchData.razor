@page "/fetchdata"
@inject HttpClient Http
@inject IToastService toastService
@using System.Linq
@using System.Collections.Generic
@using System.ComponentModel


<h1>Table Example</h1>

<h3 style="text-align: center;">This component demonstrates fetching data from the server. The table itself supports instant CRUD operations.</h3>

<hr />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

     <CRUDTableScaffold Items="@forecasts" NewItem="@newForcast" Name="Peter">
        <NullTemplate>
            <text>Custom Loading...</text>
        </NullTemplate>
        <CreateRowTemplate Context="newForcast">
            <tr>
                <td class="table-color">
                    <button type="button" style="float:right;" class="btn btn-info add-new" @onclick="@(async () => CreateRecord(newForcast))"><i class="fa fa-plus"></i> Add New</button>
                </td>
                <td>
                    <input type="text" Class="form-control" @bind="@newForcast.Date" disabled="disabled" />
                </td>
                <td>
                    <input type="text" Class="form-control" @bind="@newForcast.TemperatureC" />
                </td>

                <td>
                    <input type="text" Class="form-control" @bind="@newForcast.Summary" />
                </td>
            </tr>
        </CreateRowTemplate>
        <TableHeader>
            <th>Actions</th>
            <th>Date</th>
            <th>Temp C</th>
            <th>Summary</th>

        </TableHeader>
        <RowTemplate>
            <td class="table-color">  
                <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-trash text-danger crud-icons"
                          @onclick="@(async () => await DeleteRecord(context))"></BSButton>
            </td>
            <td><input type="text" Class="form-control" @bind="@context.Date" @onfocusout="() => MouseOut(context)" /></td>
            <td><input type="text" Class="form-control" @bind="@context.TemperatureC" @onfocusout="() => MouseOut(context)" /></td>
            <td><input type="text" Class="form-control" @bind="@context.Summary" @onfocusout="() => MouseOut(context)" /></td> 
        </RowTemplate>
    </CRUDTableScaffold>

<div>-------------------------</div>

<h1>Card Layout Example</h1>

<ProductList CardList="@forecasts"></ProductList>

<div>-------------------------</div>

    
}


<link href="../css/custom.css" rel="stylesheet"/>
<link href="../css/cardflip1.css" rel="stylesheet"/>
@* <link href="../css/cardflip2.css" rel="stylesheet"/> *@




@code {
    public ProductCardModel newForcast = new ProductCardModel();
    public  List<ProductCardModel> forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<List<ProductCardModel>>("sample-data/weather.json");
    }

    protected async void CreateRecord(ProductCardModel newForcast)
    {
        toastService.ShowInfo("Can't create from Demo site");

        if (newForcast.Summary == null)
           newForcast.Summary = "none";

                forecasts.Insert(0, newForcast);
                newForcast = null;
                newForcast = new ProductCardModel();

               // // await Http.PostAsJsonAsync("ForcastsController/", newForcast);
        
    }

    protected async Task DeleteRecord(ProductCardModel forcast)
    {
        forecasts.Remove(forcast);
        toastService.ShowSuccess("Deleted");
        //await Http.DeleteAsync("ForcastsController/" + Convert.ToInt32(id));
    }

//Update record
    protected async void MouseOut(ProductCardModel forecasts)
    {
        toastService.ShowInfo("Can't update from Demo site");
        //var val = await Http.PostAsJsonAsync("ForcastsController/", forecasts);
    }
    
}


<style>
    h1,
h2 {
	color: #fff;
	text-transform: uppercase;
}

h3 {
	font-size: 20px;
	color: #fff;
}

p {
	color: hsla(0, 0%, 100%, .7);
}

.label {
	font-size: 14px;
	color: #afb3bb;
	overflow-wrap: normal;
	line-height: 26px;
	background-color: transparent;
}

.table {
    color:white;
}
body{
 background-color: #01102d;
}

</style>